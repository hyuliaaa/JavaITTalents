use hr;

# 1
select avg(salary) as average_salary
from employees
join departments on employees.department_id = departments.department_id
where departments.department_name = 'Sales';

# 2
select count(*)
from employees
join departments on employees.department_id = departments.department_id
where department_name = 'Sales';

# 3 - number of all locations where the company has an office
select count(distinct city) as location_number
from locations;

# 4
select count(*) as with_manager
from departments
where manager_id is not null;

# 5
select count(department_id) as no_manager
from departments
where manager_id is null;

# 6
select  department_name, avg(salary) as avg_salary
from employees
join departments using (department_id)
group by department_id;

# 7 
select department_name, city, count(employee_id) as employee_number
from employees
right join departments using (department_id)
join locations using (location_id)
group by department_id;

# 8 
select departments.department_name,m.first_name,m.last_name, count(e.manager_id) AS 'employee_number'
from departments
left join employees m on departments.manager_id = m.employee_id
join employees e on m.employee_id = e.manager_id
group by departments.department_id, e.manager_id;

SELECT d.department_name, count(*) as manager_count from departments as d
join employees as e on (e.manager_id=d.manager_id)
where d.manager_id is not null
group by e.manager_id;



# 9
select  m.first_name,m.last_name, departments.department_name,city
from employees m
join employees e on m.employee_id = e.manager_id
join departments on m.department_id = departments.department_id
join locations on departments.location_id = locations.location_id
group by e.manager_id
having count(e.manager_id) = 5;

# 10
select region_name, count(employees.employee_id)
from regions
left join countries using (region_id)
left join locations using (country_id)
left join departments using (location_id)
right join employees using (department_id)
group by region_name;

# 11
select department_name, job_title, count(job_title)
from employees
join jobs using (job_id)
right join departments using (department_id)
group by departments.department_id, job_id;

# 12
select first_name, last_name, salary
from employees
where salary in (select min(salary) from employees);

start transaction;
insert into employees 
(employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary,commission_pct ,manager_id, department_id) 
values (250,'elio', 'isa','RGDG',12344556,current_date(),'AC_ACCOUNT',2100,null,205,110);
rollback;

# 13
select first_name,last_name, salary
from employees
where salary < (select min(salary) from employees) * 1.1 ;

# 14
select department_name, max(salary)
from departments
join employees using (department_id)
group by department_name;

# 15
select *
from employees
where length(last_name) = 5;


# 16
select * 
from employees
where substr(first_name,1,1) = substr(last_name,1,1);

# 17
select department_name,	coalesce(concat(first_name,' ',last_name), 'No manager') as manager_name
from departments
left join employees on departments.manager_id = employees.employee_id;


# 18 
SELECT M.FIRST_NAME, M.LAST_NAME, IF(COUNT(E.EMPLOYEE_ID) = 0, 'JUST AN EMPLOYEE', IF(COUNT(E.EMPLOYEE_ID) = 1, 'Junior manager', COUNT(E.EMPLOYEE_ID))) AS TXT 
FROM EMPLOYEES M
LEFT JOIN EMPLOYEES E ON M.EMPLOYEE_ID = E.MANAGER_ID
GROUP BY M.FIRST_NAME;	


# 19 
SELECT CONCAT(current_time(),' ',DAY(NOW()),' ',month(NOW()),' ',YEAR(NOW())) AS DATE_TIME;
SELECT date_add(current_date(), INTERVAL 7 DAY) AS DATE_AFTER_WEEK;

# 20

CREATE TABLE USERS(
user_id int auto_increment,
primary key(user_id),
username VARCHAR(50),
password VARCHAR (50) not null,
last_login timestamp
);


INSERT INTO USERS 
(username, password,last_login)
VALUES
('Maria','mara123',now());

INSERT INTO USERS 
(username, password,last_login)
VALUES
('Vanya','vanchet0',now());


INSERT INTO USERS 
(username, password,last_login)
VALUES
('Nina','ninche1',date_sub(now(),interval 7 day));

INSERT INTO USERS 
(username, password,last_login, group_id)
VALUES
('Vilisvala','vili12',date_sub(now(),interval 5 day),3);

# 21
create view v_users as 
SELECT *
FROM USERS
WHERE DAY(last_login) = day(now());

select * from v_users;
drop view v_users;

# 22 Write a SQL statement to create a table GROUPS. Groups should have
# unique name (use unique constraint). 
CREATE TABLE GROUPSS(
name varchar(50),
unique(name)
);


# 23
ALTER TABLE GROUPSS
ADD column group_id int first;

alter table groupss
drop column group_id;

alter table groupss 
add constraint g_id primary key(group_id);

ALTER TABLE groupss 
MODIFY group_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY;

alter table users
add column group_id int;

alter table users 
drop column group_id;

alter table users
add constraint g_id_fk foreign key(group_id) references groupss(group_id);


ALTER TABLE groupss MODIFY group_id INT NOT NULL AUTO_INCREMENT;

insert into groupss
(name)
values('catloves');

insert into groupss
(name)
values('doglovers');

insert into groupss
(name)
values('rabbitlovers');





select *
from users
join groupss using(group_id);

alter table users
add column fullname varchar(100) AFTER user_id;

update users
SET fullname ='Maria Lozanova'
where user_id = 1;

update users
SET fullname ='Vanya Dobreva'
where user_id = 2;

update users
SET fullname ='Nina Petelova'
where user_id = 3;

update users
SET fullname ='Vilislava Andonova'
where user_id = 4;


select * from groupss;
select * from users;
select * from employees;


insert into users(fullname,username,password)
select concat(first_name,' ',last_name),email,' '
from employees;



update users
SET last_login = date_sub(now(), interval 20 year)
where user_id >=5 and user_id <=20; 



# 27 
update users 
set password = null
where last_login < '10.03.2006';


select * from users;

# remove not null constraint
ALTER TABLE users MODIFY COLUMN password varchar(50) null; 


delete from users
where password is null or password = ' ';

# 30
create table WORKHOURS(
	employee_id integer,
    primary key(employee_id),
    foreign key(employee_id) references employees(employee_id),
    date timestamp,
    task varchar(50),
    hours int,
    comments varchar (100)

);
	
